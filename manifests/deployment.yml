apiVersion: apps/v1
kind: Deployment
metadata:
  name: by-the-app-api-demo-deployment
  namespace: by-the-app-prod
spec:
  replicas: 3
  selector:
    matchLabels:
      app: by-the-app-api-demo
  template:
    metadata:
      labels:
        app: by-the-app-api-demo
    spec:
      containers:
      - name: by-the-app-api-demo
        image: #{repository-image}#
        resources:
          limits:
            memory: "256Mi" # Adjusted memory limit
            cpu: "100m"    # Adjusted CPU limit
        ports:
        - containerPort: 8080
        env:
        - name: OPENAI_API_KEY
          value: #{openai-api-key}#
        - name: API_SECRET_KEY
          value: #{api-secret-key}#
        - name: TWILIO_AUTH_KEY
          value: #{twilio-auth-key}#
        - name: BYTHEAPP_AZURE_STORAGE_CONNECTION_STRING
          value: #{bytheapp-azure-storage-connection-string}#
        - name: KEY_VAULT_NAME
          value: #{key-vault-name}#
        - name: AZURE_CLIENT_ID
          value: #{app-dev-client-id}#
        - name: AZURE_CLIENT_SECRET
          value: #{app-dev-secret}#
        - name: AZURE_TENANT_ID
          value: #{app-dev-tenant-id}#
        - name: SQLALCHEMY_DATABASE_URI
          value: #{sqlalchemy-database-uri}#
        - name: FLASK_ENV
          value: development
        - name: SECRET_KEY
          value: #{db-secret-key}#
        - name: POSTGRES_DB
          value: defaultdb
        - name: POSTGRES_USER
          value: avnadmin
        - name: POSTGRES_PASSWORD
          value: #{POSTGRES-PASSWORD}#
        - name: POSTGRES_HOST
          value: #{POSTGRES-HOST}#
        - name: POSTGRES_PORT
          value: "28370"
        - name: JWT_SECRET_KEY
          value: "#{auth-jwt-secret-key}#"
        - name: KAFKA_BOOTSTRAP_SERVERS
          value: "#{kafka-bootstrap-servers}#"
        - name: KAFKA_TOPIC
          value: "ai-responses"
        - name: KAFKA_GROUP_ID
          value: "ai-response-processor"
        - name: KAFKA_SSL_CA_FILE
          value: "/app/certs/ca.pem"
        - name: KAFKA_SSL_CERT_FILE
          value: "/app/certs/service.cert"
        - name: KAFKA_SSL_KEY_FILE
          value: "/app/certs/service.key"
        volumeMounts:
        - name: kafka-certs
          mountPath: /app/certs
      imagePullSecrets:
        - name: #{acr-secret-name}#
      volumes:
      - name: kafka-certs
        secret:
          secretName: kafka-certs

---
apiVersion: v1
kind: Service
metadata:
  name: by-the-app-api-demo-service
  namespace: by-the-app-prod
spec:
  selector:
    app: by-the-app-api-demo
  ports:
  - port: 80
    targetPort: 8080


---
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: by-the-app-api-demo-ingress
  namespace: by-the-app-prod
  annotations:
    kubernetes.io/ingress.class: nginx
    nginx.ingress.kubernetes.io/upgrade: "websocket"
    nginx.ingress.kubernetes.io/connection: "upgrade"
    nginx.ingress.kubernetes.io/proxy-connect-timeout: "120"
    nginx.ingress.kubernetes.io/proxy-read-timeout: "3600"
    nginx.ingress.kubernetes.io/proxy-send-timeout: "3600"
    nginx.org/websocket-services: by-the-app-api-demo-service
spec:
  ingressClassName: nginx   # <-- use official ingress class
  tls:
  - hosts:
    - api-demo.bytheapp.com
    secretName: bytheappdemo-ingress-tls
  rules:
    - host: #{host-url}#
      http:
        paths:
          - path: /
            pathType: Prefix
            backend:
              service:
                name: by-the-app-api-demo-service
                port:
                  number: 80



